1. (9.9)
a)
A faster CPU may decrease the CPU utilization percentage. 20% CPU utilization means that the CPU idles 80% of the time. If it does things even faster, the idle time could be longer such that the utilization percentage may become lower.

b)
A faster paging disk could increase the CPU utilization. Since CPU spends less time waiting on the paging disk I/O, it can do more things, becoming more busy. In that case, the CPU utilization percentage will increase.

c)
Increasing the degree of multiprogramming could have almost no effect on CPU utilization, or even a bit worse. When context switching, the paging disk access could result in CPU waiting. In that case, CPU utilization could be slightly decreased.

2. (11.2)
Since the file will remain in the disk and the inode corresponding to the file is being accessed, the subsequent reads of the first process should be fine.

Reference:
http://unix.stackexchange.com/questions/50179/what-happens-when-you-delete-a-hard-link

3. (12.8)
Seek time: 12 ms
Rotation time: 60 * 1000 / 5400 = 5.56 ms
Transfer time: 512 / (850 / 8) = 4.82 us

The first request: 12 + 5.56 + 0.00482 = 17.56482
The subsequent requests: 5.56 + 0.00482 = 5.56482

The result is 12 + 5.56482 * 10000 = 12 + 55648.2 = 55660.2 ms = 55.66 s

4. (12.15)
10000 / 100000 = 0.1 s

5. (13.5)
a)
12 direct to 6 KB block each = 12 * 6 KB = 72 KB

b)
6 KB / 6 B = 1024 pointers / block = 2^10 ppb
indirect: 2^10 * 6 * 2^10 = 6 MB
double: 2^10 * 2^10 * 6 * 2^10 = 6 GB
triple: 2 * 2^10 * 2^10 * 2^10 * 6 * 2^10 = 12 TB
quadruple: 2^10 * 2 * 2^10 * 2^10 * 2^10 * 6 * 2^10 = 12 PB

bigger than 12.012 PB

6. (13.9)
Because FAT uses linked lists to represent files. There is only room for file metadata with one directory entries with the file's name in the representation. Since each file can be accessed via exactly one directory entry, there is no way to use multiple hard links to the file.
